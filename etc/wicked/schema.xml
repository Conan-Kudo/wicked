<define name="ipv4-address">
  <array element-type="byte" minlen="4" maxlen="4" notation="ipv4addr"/>
</define>

<define name="ipv4-address-prefix" class="dict">
  <address type="ipv4-address"/>
  <prefix type="byte"/>
</define>

<define name="ipv6-address">
  <array element-type="byte" minlen="16" maxlen="16" notation="ipv6addr"/>
</define>

<define name="ipv6-address-prefix" class="dict">
  <address type="ipv6-address"/>
  <prefix type="byte"/>
</define>

<define name="ethernet-address">
  <array element-type="byte" minlen="6" maxlen="6" notation="hwaddr"/>
</define>

<!-- This represents a generic network address.
  -- The string notation uses the common numeric representation for
  -- IPv4 and IPv6 addresses (other formats currently not supported).
  -- On the wire, the address is represented in a packed format. -->
<define name="network-address">
  <array element-type="byte" notation="net-address" />
</define>

<define name="network-address-prefix">
  <array element-type="byte" notation="net-address-prefix" />
</define>

<!-- IPv4 address configuration
  -- This is used in the per-interface <static> config as well as the
  -- leases generated by some dynamic address configuration service.
  -->
<define name="ipv4-addrconf" class="dict">
  <!-- statically assigned addresses are addr/prefix, optionally
       accompanied by a peer address (for tunnel setups etc) -->
  <define name="static-address" class="dict">
    <local type="ipv4-address-prefix"/>
    <peer type="ipv4-address"/>
  </define>

  <define name="static-route" class="dict">
    <destination type="ipv4-address-prefix"/>
    <mtu type="uint32"/>
    <tos type="byte"/>

    <define name="ipv4-nexthop" class="dict">
      <gateway type="ipv4-address"/>
      <weight type="uint32"/>
      <!-- Other types of routing info could be added here,
        -- eg for blackhole routes etc. -->
    </define>

    <!-- Can occur one or more times -->
    <nexthop type="ipv4-nexthop"/>
  </define>

  <!-- Can occur one or more times -->
  <address type="static-address"/>

  <!-- Can occur one or more times -->
  <route type="static-route"/>
</define>

<include name="schema/constants.xml"/>
<include name="schema/ethernet.xml"/>
<include name="schema/vlan.xml"/>
<include name="schema/bonding.xml"/>
<include name="schema/bridge.xml"/>
<!--
 -->

<define name="network-interface" class="dict">
 <!-- interface status bits -->
 <define name="state-bits" type="uint32" constraint="bitmap">
  <device-up bit="0" />
  <link-up bit="1" />
  <powersave bit="2" />
  <network-up bit="3" />
  <point-to-point bit="4" />
  <arp bit="5" />
  <broadcast bit="6" />
  <multicast bit="7" />
 </define>

 <!-- An address assigned to a network interface -->
 <define name="assigned-address" class="dict">
   <local type="network-address-prefix"/>
   <peer type="network-address"/>

   <!-- This is the addrconf method that owns this address -->
   <owner type="builtin-addrconf" />
 </define>

 <define name="assigned-address-list" class="array" element-type="assigned-address" />

 <!-- A route assigned to a network interface -->
 <define name="assigned-route" class="dict">
   <destination type="network-address-prefix"/>
   <mtu type="uint32" />
   <tos type="uint32" />
   <priority type="uint32" />

   <nexthop class="dict">
     <gateway type="network-address"/>
     <device type="string" />
     <weight type="uint32" />
     <flags type="uint32" />
   </nexthop>

   <!-- This is the addrconf method that owns this address -->
   <owner type="builtin-addrconf" />
 </define>

 <define name="assigned-route-list" class="array" element-type="assigned-route" />

 <!-- Generic per-address family settings -->
 <define name="af-info" class="dict">
    <enabled type="boolean" />
    <forwarding type="boolean" />
 </define>

 <!-- Properties of an interface start here -->
 <name type="string"/>

 <!-- These bits must match the definitions in netinfo.h -->
 <status type="state-bits" />

 <link-type type="builtin-iftype"/>

 <index type="uint32"/>
 <metric type="uint32"/>
 <txqlen type="uint32"/>
 <mtu type="uint32"/>

 <!-- General ipv4 and ipv6 specific settings -->
 <ipv4 type="af-info"/>
 <ipv6 type="af-info"/>

 <addresses type="assigned-address-list" />
 <routes type="assigned-route-list" />
</define>

<service name="interface-list" interface="com.suse.Wicked.InterfaceList">
 <!-- We may add higher-level methods here that kind of throw a full configuration
   -- at the server and expect it to bring up the whole interface -->
</service>

<service name="interface" interface="com.suse.Wicked.Interface" object-class="netif">
  <define name="properties" type="network-interface"/>

  <define name="link-request" class="dict">
   <status type="network-interface:state-bits"/>

   <txqlen type="uint32"/>
   <mtu type="uint32"/>

   <ipv4 type="network-interface:af-info"/>
   <ipv6 type="network-interface:af-info"/>
  </define>

  <method name="firewallUp">
    <arguments>
      <!-- to be defined -->
    </arguments>
  </method>

  <method name="linkChange">
    <arguments>
      <request type="link-request" />
    </arguments>
    <return>
      <network-interface:state-bits/>
    </return>
  </method>

  <method name="linkAuth">
    <arguments>
      <!-- to be defined -->
    </arguments>
  </method>

  <method name="networkUp">
    <arguments>
      <!-- to be defined -->
    </arguments>
    <return>
      <network-interface:state-bits/>
    </return>
  </method>

  <method name="networkDown">
    <arguments>
      <!-- to be defined -->
    </arguments>
    <return>
      <network-interface:state-bits/>
    </return>
  </method>

</service>

<service name="ipv4-static" interface="com.suse.Wicked.IPv4Address.Static" object-class="netif">
  <define name="properties" class="dict">
    <addresses type="network-interface:assigned-address-list" />
    <routes type="network-interface:assigned-route-list" />
  </define>

  <method name="configure">
    <arguments>
      <!-- Note: all addresses are expected to be IPv4 -->
      <config type="properties"/>
    </arguments>
  </method>
</service>

<service name="ipv6-static" interface="com.suse.Wicked.IPv6Address.Static" object-class="netif">
  <define name="properties" class="dict">
    <addresses type="network-interface:assigned-address-list" />
    <routes type="network-interface:assigned-route-list" />
  </define>

  <method name="configure">
    <arguments>
      <!-- Note: all addresses are expected to be IPv6 -->
      <config type="properties"/>
    </arguments>
  </method>
</service>

