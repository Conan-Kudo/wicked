#!/bin/bash
#
# Wicked ifup network interface configuration compatibility script.
#
# Copyright (c) 2013 SUSE LINUX Products GmbH, Nuernberg, Germany.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors: Marius Tomaschewski <mt@suse.de>
#          Pawel Wieczorkiewicz <pwieczorkiewicz@suse.de>
#
###

unset POSIXLY_CORRECT ; set +o posix # we are using non-posix bash features
export PATH=/sbin:/usr/sbin:/bin:/usr/bin
if test -f /etc/sysconfig/network/config ; then
	.  /etc/sysconfig/network/config
fi

#
# Exit codes (from sysconfig's functions.commmon):
#
R_SUCCESS=0		# interface has been set up
R_ERROR=1		# any unspecified error
R_USAGE=2		# wrong usage
R_NOTALLOWED=4		# insufficient privilege
R_NOTRUNNING=7		# the interface is not up but it should be up
R_NOT_UP2DATE=13	# returned from ifprobe if configuration has changed

#
# Helper functions
#
usage ()
{
	echo "Usage: if{up,down,status,probe} [<config>] <interface> [-o <options>]"
	echo ""
	echo "Common options are:"
	echo "    debug    : be verbose"
	echo ""
	echo "Options for if{status,probe} are:"
	echo "    quiet    : Do not print out errors, but just signal the result through exit status"
	echo ""
	echo "Options for ifdown are:"
	echo "    force    : Forces persistent (nfsroot type) interface down"
	echo ""
	echo "Unknown options are simply ignored, so be careful."
	echo ""
	exit $R_USAGE
}

mesg()
{
	local p s t

	case $1 in
	-p) shift; p="$1" ; shift ;;
	esac
	test $PPID -eq 1 || s="-s"
	test "X$SCRIPTNAME" = "X" || t="$SCRIPTNAME[$$]"

	printf -- "%s\n" "$*" | logger ${p:+-p $p} ${s:+-s} ${t:+-t "$t"}
}

debug()
{
	test "$DEBUG" = "yes" && mesg -p debug "$*"
}

systemd_running()
{
	mountpoint -q /sys/fs/cgroup/systemd
}

systemd_get_service_id()
{
	local service="$1"
	local _id=`systemctl --no-pager -p Id show "$service" 2>/dev/null`
	echo "${_id#Id=}"
}

systemd_get_network_service_id()
{
	systemd_get_service_id network.service
}


######################################################################
# Check responsibility
#
if systemd_running ; then
	network_service_id=`systemd_get_network_service_id`
	if test "X$network_service_id" != "Xwicked.service" ; then
		mesg "Network is managed by '$network_service_id' -> skipping"
		exit $R_USAGE
	fi
elif test "X$NETWORKMANAGER" = "Xyes" ; then
	mesg "Network is managed by NetworkManager -> skipping"
	exit $R_USAGE
fi


######################################################################
# Commandline parsing
#
SCRIPTNAME="${0##*/}"
case $SCRIPTNAME in
	ifup|ifstatus|ifdown|ifprobe)				;;
	*)		usage					;;
esac

INTERFACE=""
case $1 in
	""|-*)		usage					;;
	*)		INTERFACE=$1 ; shift			;;
esac
CONFIG=""
case $1 in
	""|-o)		shift					;;
	-*)		usage					;;
	*)		CONFIG="$INTERFACE" ; # unused
			INTERFACE="$1" ; shift			;;
esac
case $1 in
	-o)		shift					;;
esac
OPTIONS=$@
opt_debug=""
opt_quiet=""
opt_force=""
while [ $# -gt 0 ]; do
	case $1 in
	debug)		DEBUG="yes" ; opt_debug="most"		;;
	debug=*)	DEBUG="yes" ; opt_debug="${1#debug=}"	;;
	quiet)		opt_quiet="--quiet"			;;
	force)          opt_force="--force device-exists"	;;
	*)		debug "unknown option \"$1\""		;;
	esac
	shift
done

wicked_client="@wicked_sbindir@/wicked"
case $SCRIPTNAME in
	ifup)
		$wicked_client \
			${opt_debug:+--debug $opt_debug} \
			ifup "$INTERFACE" \
		; rc=$?
	;;
	ifdown)
		$wicked_client \
			${opt_debug:+--debug $opt_debug} \
			ifdown \
			  ${opt_force} \
			  "$INTERFACE" \
		; rc=$?
	;;
	ifstatus)
		$wicked_client \
			${opt_debug:+--debug $opt_debug} \
			ifstatus \
			  ${opt_quiet} \
			  "$INTERFACE" \
		; rc=$?
	;;
	ifprobe)
		$wicked_client \
			${opt_debug:+--debug $opt_debug} \
			ifcheck \
			  --changed \
			  ${opt_quiet} \
			  "$INTERFACE" \
		; rc=$?
	;;
esac

# Compatibility return code mapping
case $rc in
	150) # NI_WICKED_ST_CHANGED_CONFIG
		exit $R_NOT_UP2DATE
	;;
	151) # NI_WICKED_ST_NOT_IN_STATE
		exit $R_NOTRUNNING
	;;
	152) # NI_WICKED_ST_PERSISTENT_ON
		exit $R_NOTALLOWED
	;;
	*)
		exit $rc
	;;
esac
