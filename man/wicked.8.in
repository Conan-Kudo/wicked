.TH WICKED 8 "16 July 2012
.SH NAME
wicked \- network management utility
.SH SYNOPSIS
.BI "wicked [" global-options "] ifup [" options "] " interface
.br
.BI "wicked [" global-options "] ifdown [" options "] " interface
.br
.BI "wicked [" global-options "] ifcheck [" options "] " interface
.br
.BI "wicked [" global-options "] show-xml [" options "] [" interface "]
.br
.BI "wicked [" global-options "] convert [" options "] [" file " ... ]
.br
.BI "wicked [" global-options "] xpath [" options "] " format ...
.br
.BI "wicked [" global-options "] getnames [" options "] " device ...
.br
.PP
.\" ----------------------------------------
.SH DESCRIPTION
\fBwicked\fP offers access to the wicked network managment service from the
command line. It can be used to display the current state of network devices,
to bring interfaces up or down, or to check their operational status.
.PP
Conceptually, the wicked network management system deals with two very
distinct classes of information. One is the set of \fIconfiguration
files\fP stored somewhere in the system; the other is the current
\fIconfiguration state\fP maintained by the kernel and closely related
system daemons like \fBpppd\fP(8) or \fBopenvpn\fP(8).
.PP
The server only knows about the latter, but does not parse any configuration
files, and does not maintain any state besides what is actually in
effect. On the other hand, the client never probes the kernel directly
to obtain the current system state. The client's job is to parse the
configuration file(s) handed to it by the user, process them and perform
the necessary calls to the server to make the system state match the
desired configuration.
.PP
The client and server communicate with each other over DBus. For a
conceptual overview of the supported DBus APIs, please refer
to \fBwicked\fP(7).
.\" ----------------------------------------
.SH OPTIONS
.B wicked
supports a set of options common to all subcommands. These options
must precede the subcommand, as in
.PP
.nf
.B "     # wicked --dry-run ifup eth0
.fi
.PP
Currently, \fBwicked\fP supports the following list of options:
.TP
.BI "\-\-config " filename
By default, the daemon reads its configuration from
\fB@wicked_configdir@/common.xml\fP.
The
.B \-\-config
options allows you to specify a different configuration file.
.TP
.BI "\-\-debug " facility
Enable debugging for \fIfacility\fP.
The list of available facilities can be obtained using
\fB"\-\-debug help"\fP.
.TP
.BI "\-\-root-directory " pathname
Specify an alternative root directory from where to load files.
This applies to the client's configuration file as well as any
interface configuration files.
.TP
.BI "\-\-dry-run
skips all calls to \fBwickedd\fP that would modify the current system
settings, instead displaying the command that would be sent, along with
an XML representation of the XML.
Helpful for getting a feel for how the utility and the protocol work,
and for debugging.
.IP
.B This does not work at the moment.
.\" ----------------------------------------
.SH ifup - bring up one or more interfaces
To bring up interfaces, use \fBwicked ifup\fP.
This command supports a number of different modes of operations.
In its simples form, you just give it the name of an interface, and
it will bring up the interface using the stored system configuration:
.PP
.nf
.B "    # wicked ifup eth0
.fi
.PP
This invocation makes \fBwicked\fP read all network configuration files
from \fB/etc/sysconfig/network\fP by looking for files with a \fB.xml\fP
suffix, and look for a description of the named interface. If found, it
will proceed to bring up the interface and establish its network configuration.
This includes assigning static address, and starting DHCP and similar
address configuration protocols as required.
.PP
Instead of an interface name, you can also use the special names \fBall\fP
or \fBboot\fP, which will tell \fBwicked\fP to bring up all interfaces.
The difference between \fBall\fP and \fBboot\fP is in behavior. When
using the latter, \fBwicked\fP will ignore any interfaces that are not
configured as boot time interfaces.
.PP
It is also possible to bring up interfaces that do not have a
configuration stored in the system; using the \fB--ifconfig\fP
option you can provide an XML interface description independent from
any stored configuration. Again, you have to specify the name of the
interface to bring up, or \fBall\fP
to bring up all interfaces described in the file:
.PP
.nf
.B "    # wicked ifup --ifconfig bridgecfg.xml all
.fi
.PP
Note that \fBwicked\fP attempts to bring up interfaces in a "reasonable
order": for virtual interfaces like VLANs, bridges or bonds, it will
always make sure that all subordinate devices are in the required state
before bringing up the virtual device itself.
.PP
For the ease of migration, \fBwicked\fP also offers a compatibility mode in
which it will try to read and interpret configuration files in the old-style
ifcfg syntax described in \fBifcfg\fP(5):
.PP
.nf
.B "    # wicked ifup --ifconfig compat:/etc/sysconfig/network eth0
.fi
.PP
The \fBifup\fP command supports the following options:
.TP
.BI "\-\-ifconfig " pathname
Specify an alternative source of network configuration, instead of
obtaining the system's interface configuration.
.IP
When specifying the path of a file, it must contain an XML definition
of the interface(s) by default. When \fIpathname\fP refers to a directory,
\fBwicked\fP will scan it for files having a \fB.xml\fP suffix and
parse these.
.IP
If the file name starts with the string \fBcompat:\fP, \fBwicked\fP is
instructed to load the interface configuration from files in the
old-style "ifcfg" syntax, as described by the \fBifcfg\fP(5) manual page.
The string following the \fBcompat:\fP prefix is interpreted as a
path name. If this path name refers to a directory,
\fBwicked\fP will scan it for files with names matching \fBifcfg-*\fP.
If the path name refers to a regular file, it will parse this file, assuming
it is an ifcfg file.
.IP
The special name \fBFIRMWARE\fP can be used to obtain the interface
definition(s) from firmware services like iBFT.
.TP
.BI "\-\-ifpolicy " pathname
Specify an alternative source of network configuration policies, instead
of obtaining the system-wide policy. Policies provide a mechanism for
separating address configuration behavior from actual interface instances.
.IP
When specifying the path of a file, it must contain an XML definition
of the interface(s). When \fIpathname\fP refers to a directory,
\fBwicked\fP will scan it for files having a \fB.xml\fP suffix and
parse these.
.TP
.BI "\-\-mode " identifier
This can be used in conjunction with the special interface name \fBall\fP,
in order to restrict the set of interfaces that will be brought up.
If this option is given, only those interface configurations are considered
that have a control \fB<mode>\fP element containing the given identifier.
.IP
If the interface does not specify a \fB<mode>\fP element in its control
section, then it defaults to \fBboot\fP.
.TP
.BI "\-\-boot-stage " identifier
This can be used in conjunction with the special interface name \fBall\fP,
in order to restrict the set of interfaces that will be brought up.
If this option is given, only those interface configurations are considered
that have a \fB<boot-stage>\fP element containing the given identifier.
.IP
If the interface does not specify a \fB<boot-stage>\fP element in its control
section, then it defaults to \fBdefault\fP.
.TP
.BI "\-\-skip-origin " identifier
This can be used to ignore interfaces that have already been configured.
For instance, an interface that has been configured based on a firmware
configuration (see option \fB\-\-ifconfig\fP above) will be marked as
having a configuration origin of \fBfirmware\fP. When bringing up the
remaining network interfaces, it is a good idea to not touch these.
This can be achieved by running \fBwicked\fP with the option
\fB\-\-skip-origin firmware\fP.
.TP
.BI "\-\-skip-active
Ignore all interfaces that have already been brought up.
.TP
.BI "\-\-timeout " seconds
The default timeout for bringing up a network device is 5 seconds. If
the interface fails to come up within this time, \fBwicked\fP will fail
the device and and exit with an error code. All interfaces depending
on the failed interface will fail as well.
.IP
Failed interfaces are left in an undefined state.
.\" ----------------------------------------
.SH ifdown - bring down one or more interfaces
This command does the reverse of \fBifup\fP.
Again, you can give it either a specific interface name, or use
the special names \fBall\fP or \fBshutdown\fP
to bring down all devices. When bringing down several interfaces,
the utility tries to do this in a suitable order.
.PP
The \fBifdown\fP command supports the following options:
.TP
.BI "\-\-ifconfig " pathname
Specify an alternative source of network configuration, instead of
obtaining the system's interface configuration.
.IP
When specifying the path of a file, it must contain an XML definition
of the interface(s). When \fIpathname\fP refers to a directory,
\fBwicked\fP will scan it for files having a \fB.xml\fP suffix and
parse these.
.TP
.BI "\-\-delete
When bringing down a virtual interface such as a VLAN or a bridge,
delete the virtual interface in addition to shutting it down.
.TP
.BI "\-\-timeout " seconds
The default timeout for bringing down a network device is 5 seconds. If
the interface fails to shut down within this time, \fBwicked\fP will fail
the device and and exit with an error code. All interfaces that are
used by the failed interface will fail as well.
.IP
Failed interfaces are left in an undefined state.
.\" ----------------------------------------
.SH convert - convert legacy files to XML
In order to ease transition, wicked supports old-style ifcfg files, and can converts
them to XML. When invoked without arguments, it will try to determine the type of
Linux distro you're on, and create one XML file from all your ifcfg files.
.PP
This behavior can be fine-tuned using the following options:
.TP
.BI "\-\-format " format
Rather than having wicked determine the distribution on its own, this lets you
specify the expected file format. Currently, \fBwicked\fP will recognize
format names \fBsuse\fP and \fBredhat\fP.
.TP
.BI "\-\-output " path
By default, \fBwicked\fP will write the XML document to its standard output. Using
this option, you can instruct it to write to a different file instead. If the specified
\fIpath\fP is a directory, the XML document will be split into separate files, one for
each interface.
.PP
.\" ----------------------------------------
.SH getnames - obtain different names for an interface
\fBwicked\fP can identify network devices via a number of different
mechanisms, in addition to the usual interface name.  For instance,
you can identify an Ethernet device using the \fIpermanent MAC address\fP
programmed into the card's EEPROM, or via its PCI topology.
.PP
For the convenience of management applications, \fBwicked\fP provides
a function to retrieve all possible names for an interface names as
XML. For each device specified on the command line, a \fB<names>\fP
is printed, with zero or more \fB<name>\fP elements.
.PP
The \fBgetnames\fP command supports the following options:
.TP
.BI "\-\-modem "
Instead of querying network devices, interpret the given interface name
as a modem device.
.PP
.\" ----------------------------------------
.SH xpath - retrieve data from an XML blob
The \fBwickedd\fP server can be enhanced to support new network device types
via extension commands \(em usually shell scripts. When invoking such a script,
\fBwickedd\fP will hand it the arguments of the DBus call as an XML document.
.PP
The \fBxpath\fPP command tries to provide a flexible and convenient interface for extracting
individual bits of information from an XML document. To the degree that XML
can be convenient to a shell programmer...
.PP
For this, \fBwicked\fP supports expressions using a (subset of) the XPATH 1.0
syntax. These xpath expressions can be embedded into format strings using
\fB"%{\fIexpression\fR}".
Several expressions can be embedded into one format string; this can
help to combine pairs of information such as e.g. address and prefix
length.
.PP
The \fBxpath\fP command by default expects an XML document on standard input.
You can use the \fB\-\-file\fP option to specify a filename.
.PP
The \fBxpath\fP command supports the following options:
.TP
.BR "\-\-reference " xpath-expr
By default, the command will evaluate all XPATH expressions relative to
the document's root node. Using this option allows you to "drill into"
the document: the utility will first evaluate the given expression to
look up 0 or more XML nodes in the document, and then evaluate all
format strings relative to these nodes. It is an error for the
reference expression to yield data other than XML elements (such as
strings).
.TP
.BR "\-\-file " filename
The file containing the XML document to operate on.
.PP
This manual page cannot give a full overview of xpath, of course, 
however consider the following examples (which assume the input is
an XML interface description):
.PP
.nf
.B "# wicked xpath \(dqvlan_tag=%{/interface/vlan/tag}\(dq"
.fi
.PP
Given a VLAN interface definition, this will expand to the contents 
of the \fB<tag>\fP element of the VLAN definition. The "path-like"
syntax specifies how to traverse the XML tree to find the desired node.
Assuming the tag is 42, the above command will print \fBvlan_tag=42\fP.
In case the document contains several VLAN interface definitions,
this would of course print several lines of output; one per VLAN tag
found.
.PP
Note that the \fBxpath\fP command considers an empty expansion as error.
If an element or expansion is considered optional, you can prefix it
with a question mark, as in \fB%{?...}\fP. If the expansion fails, the
expression will be replaced with an empty string.
.PP
As a different example, consider a bridge definition like the following:
.PP
.nf
<bridge>
  <ports>
    <e>
     <device>eth0</device>
     <priority>1</priority>
    </e>
    <e>
     <device>eth1</device>
     <priority>0</priority>
    </e>
  </ports>
</bridge>
.fi
.PP
In order to print out a list of device/priority pairs of all ports, you could
invoke \fBwicked\fP like this:
.PP
.nf
.B "# wicked xpath --reference \(dq/bridge/ports/e\(dq \(rs
.B "          \(dqdev=%{device} priority=%{?priority}\(dq
.fi
.PP
By using the \fB\-\-reference\fP option, you instruct \fBwicked\fP to loop over
all XML nodes matching this expression - i.e. the two child nodes of the
\fB<ports>\fP element. For each of them in turn, the xpath expression is
evaluated \fIrelative to each node\fP. Note the use of the question mark in
the \fBpriority\fP term, marking the field as optional.
.\" ----------------------------------------
.SH How interface bring-up works
.B "Everything in this and any following section is out of date and needs to be rewritten"
.PP
Interfaces can be configured for different behaviors during bring-up
and shutdown. In many Linux distributions, this is controlled by
configuration variables like \fBSTARTMODE\fP or \fBONBOOT\fP in a
sysconfig file. \fBwicked\fP understands these different behaviors,
and strives to map these distro-specific start modes to a generic
"behavior" description attached to the interface.
.PP
\fBwicked\fP's internal description of interface behavior may look
like the following example:
.PP
.nf
 <behavior>
   <boot action="start">
     <mandatory/> <only-if-link/> <wait seconds="30"/>
   </boot>
   <manual-up action="start">
     <mandatory/> <wait seconds="30"/>
   </manual-up>
   <link-up action="start"/>
 </behavior>
.fi
.PP
The three different sections of the above XML snippet affect three
different modes of operation. The first element, \fBboot\fP,
describes behavior when bringing up all interfaces using
\fBwicked ifup boot\fP. The second, \fBmanual-up\fP, controls how
the interface is brought up when calling \fBwicked ifup\fP with the
interface name. The third, \fBlink-up\fP, indicates that the interface
should be fully controlled by \fBwickedd\fP, bringing it up automatically
when the link-layer is operational.
.PP
All these elements support the same set of flags and parameters:
.TP
.B mandatory
This flag indicates that \fBwicked\fP should treat failure to bring up
the interface as an error. If this flag is not present, \fBwicked\fP
will still print a warning that the interface could not be brought up,
but will not fail.
.TP
.B wait
This indicates how long \fBwicked\fP should wait for the interface to
become fully functional. For interfaces managed through DHCP, this
includes obtaining a valid DHCP lease.
.TP
.B only-if-link
If this flag is present, \fBwicked\fP will first try to activate the
network interface without starting the address configuration, and wait
for the link-layer to become available. For instance, in the case of
Ethernet interfaces this includes waiting for link autonegotiation to
complete. If the link does not become ready within the link-layer
timeout, \fBwicked\fP will not attempt to configure the interface
any further. Depending on the setting of the \fBmandatory\fP flag
described above, this is treated as fatal or a transient failure,
respectively.
.IP
Note that the link-up timeout is different from the \fBwait\fP parameter,
which controls the overall timeout for interface bring-up. The
link-up timeout defaults to 10 seconds, and can be controlled by
the \fB--link-timeout\fP command line option.
.PP
Note that this representation of interface behavior is mostly internal to
\fBwicked\fP; by default, behavior is governed by the usual configuration
variables in the system's sysconfig files, such as \fBONBOOT\fP or
\fBSTARTMODE\fP. The backends reading these distro-specific files
understand the desired semantics of a given \fBSTARTMODE\fP settings,
and map that to the internal behavior descriptions shown above.
.PP
Bring-up of interfaces that have a \fB<link-up>\fP element is a bit
special in \fBwicked\fP. Instead of bringing up the interface in
the \fBwicked\fP client directly, it first installs a policy in the
server, which tells the server to bring up this interface when it notices
that the device's link has come up. It then proceeds by trying to
activate the device, and waits for it to come up.
.PP
.\" ----------------------------------------
.SH The fine print on interface shutdown
Analogous to interface bring-up, shutdown is governed by the interface's
\fB<behavior>\fP element. In addition to those described above, there are
three aspects of this:
.PP
.nf
 <behavior>
   <shutdown action="stop"/>
   <manual-down action="stop"/>
   <link-down action="stop"/>
 </behavior>
.fi
.PP
Depending on the interface settings, some or all of these may be missing.
For instance, SUSE supports an interface mode called \fBnfsroot\fP, where
an interface should never be shut down. This mode is mapped to a behavior
that has all of the above three actions set to \fBignore\fP rather than
\fBstop\fP.
.PP
As one might expect, the \fBshutdown\fP element controls how the interface
is being treated when calling \fBwicked ifdown shutdown\fP during system
shutdown. The \fBmanual-down\fP action controls operation when calling
\fBifdown\fP with a specific interface name, or with the special name
\fBall\fP.
.PP
Finally, the \fBlink-down\fP action is used to determine whether to install
a policy that automatically shuts down the network on the interface in case
the link should go down.
.\" ----------------------------------------
.SH "SEE ALSO"
\fBwickedd\fP(8), \fBwicked\fP(8), \fBwicked\fP(7), \fBwicked-config\fP(5).
.\" ----------------------------------------
.SH AUTHORS
Written by Olaf Kirch <okir@suse.de>

