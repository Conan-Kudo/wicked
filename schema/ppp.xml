<!--
  -- PPP Service definition
  -->
<service name="ppp-base" interface="com.suse.Wicked.PPP.Base" object-class="netif-ppp">

 <!-- This is the linkinfo returned in interface reports -->
 <define name="linkinfo" class="dict">
  <!-- Maximum Receive Unit -->
  <mru type="uint32"/>

  <!-- user name and password. If the <auth> element is present, it must
    -- have <user> and <password> children.
    -- If these elements are absent, the wicked client will prompt for
    -- them.
    -- If you do not need to authenticate (eg when using a GSM usb stick)
    -- omit the <auth> element completely.
    -->
  <auth class="dict">
    <protocol type="uint32" constraint="enum">
      <pap value="0"/>
      <chap value="1"/>
      <ms-chap value="2"/>
      <ms-chapv2 value="3"/>
      <eap value="4"/>
    </protocol>

    <hostname type="string"/>
    <user type="string" constraint="required">
      <meta:user-input type="user" prompt="Please enter ppp user name"/>
    </user>
    <password type="string" constraint="required">
      <meta:user-input type="password" prompt="Please enter ppp password"/>
    </password>
  </auth>

  <!-- The number to dial -->
  <number type="string"/>

  <!-- disconnect after n seconds of link idle -->
  <idle-timeout type="uint32"/>

 </define>

 <!-- Override the linkUp method of the netif base interface.
   -- This will start a ppp daemon process for this device.
   --
   -- For now, we ignore any and all of the usual link parameters,
   -- and let the ppp daemon handle all that stuff.
   -->
 <method name="linkUp">
   <arguments>
     <request type="interface:link-request">
       <meta:mapping document-node="/link" />
     </request>
   </arguments>
   <return>
     <interface:callback-info/>
   </return>
 </method>

 <!-- Override the linkDown method of the netif base interface.
   -- This will shut down the ppp daemon process and wait for
   -- it to exit.
   -->
 <method name="linkDown">
   <return>
     <interface:callback-info/>
   </return>
 </method>

 <method name="deleteDevice">
   <!-- no arguments, no return code -->
 </method>
</service>

<!--
     Define the standard PPP over Serial device
     This inherits all properties from the standard PPP device, and adds
     a <device> element that references a modem device.
  -->
<object-class name="netif-ppp-serial" base-class="netif-ppp"/>
<service name="ppp-serial" interface="com.suse.Wicked.PPP" object-class="netif-ppp-serial">
  <define name="linkinfo" class="dict" extends="ppp-base:linkinfo">
    <!-- The modem device. We need to subclass for ppp over ethernet,
      -- since this will reference an ethernet device instead of a modem.
      -->
    <device type="string" constraint="required">
      <meta:modem-reference shared="true"/>
      <meta:require check="netif-child-state" op="newDevice" min-state="device-up" />
      <meta:require check="netif-child-state" op="linkUp" min-state="link-up"/>
    </device>
 </define>

 <method name="changeDevice">
   <arguments>
     <config type="linkinfo">
       <!-- The mapping info tells the client to take the device
	 -- configuration from the <ppp> element. -->
       <meta:mapping document-node="/ppp" />
     </config>
   </arguments>
   <!-- returns callback list -->
 </method>

</service>

<service name="ppp-serial-factory" interface="com.suse.Wicked.PPP.Factory" object-class="netif-list">
 <!-- "Create" ppp device.
   -- This will create a pppX device and a ppp config file.
   -- The config file isn't used until the client invokes the linkUp method.
   -->
 <method name="newDevice">
  <arguments>
   <name type="string"/>
   <config type="ppp-serial:linkinfo">
    <meta:mapping document-node="/ppp"/>
   </config>
  </arguments>

  <return>
   <string/>		<!-- this is really an object handle -->
  </return>
 </method>
</service>

<!--
     Define the PPP over Ethernet device
     This inherits all properties from the PPP base device, and adds
     a <device> element that references an Ethernet device.

     Unlike the "standard" PPP interface for serial connections, the
     configuration is contained in the <pppoe> element.
  -->
<object-class name="netif-pppoe" base-class="netif-ppp"/>
<service name="pppoe" interface="com.suse.Wicked.PPPoE" object-class="netif-pppoe">
 <define name="linkinfo" class="dict" extends="ppp-base:linkinfo">
  <device type="string">
    <meta:netif-reference shared="true" object-class="netif-ethernet"/>
    <meta:require check="netif-child-state" op="newDevice" min-state="device-up" />
    <meta:require check="netif-child-state" op="login" min-state="link-authenticated" />
    <meta:require check="netif-child-state" op="linkUp" min-state="link-up" />
  </device>
 </define>

 <method name="changeDevice">
   <arguments>
     <config type="linkinfo">
       <!-- The mapping info tells the client to take the device
	 -- configuration from the <pppoe> element. -->
       <meta:mapping document-node="/pppoe" />
     </config>
   </arguments>
   <!-- returns callback list -->
 </method>
</service>

<service name="pppoe-factory" interface="com.suse.Wicked.PPPoE.Factory" object-class="netif-list">
 <!-- "Create" ppp device.
   -- This will create a pppX device and a ppp config file.
   -- The config file isn't used until the client invokes the linkUp method.
   -->
 <method name="newDevice">
  <arguments>
   <name type="string"/>
   <config type="pppoe:linkinfo">
    <meta:mapping document-node="/pppoe"/>
   </config>
  </arguments>
  <return>
   <string/> <!-- this is really an object handle -->
  </return>
 </method>
</service>
