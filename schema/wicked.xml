<define name="ipv4-address">
  <array element-type="byte" minlen="4" maxlen="4" notation="ipv4addr"/>
</define>

<define name="ipv4-address-prefix" class="dict">
  <address type="ipv4-address"/>
  <prefix type="byte"/>
</define>

<define name="ipv6-address">
  <array element-type="byte" minlen="16" maxlen="16" notation="ipv6addr"/>
</define>

<define name="ipv6-address-prefix" class="dict">
  <address type="ipv6-address"/>
  <prefix type="byte"/>
</define>

<define name="ethernet-address">
  <array element-type="byte" minlen="6" maxlen="6" notation="hwaddr"/>
</define>

<!-- This represents a generic network address.
  -- The string notation uses the common numeric representation for
  -- IPv4 and IPv6 addresses (other formats currently not supported).
  -- On the wire, the address is represented in a packed format. -->
<define name="network-address">
  <array element-type="byte" notation="net-address" />
</define>

<define name="network-address-prefix">
  <array element-type="byte" notation="net-address-prefix" />
</define>

<define name="uuid-type">
  <array element-type="byte" minlen="16" maxlen="16" />
</define>

<include name="constants.xml"/>
<include name="ethernet.xml"/>
<include name="vlan.xml"/>
<include name="bonding.xml"/>
<include name="bridge.xml"/>
<!--
 -->

<define name="network-interface" class="dict">
 <!-- interface status bits -->
 <define name="state-bits" type="uint32" constraint="bitmap">
  <device-up bit="0" />
  <link-up bit="1" />
  <powersave bit="2" />
  <network-up bit="3" />
  <point-to-point bit="4" />
  <arp bit="5" />
  <broadcast bit="6" />
  <multicast bit="7" />
 </define>

 <!-- An address assigned to a network interface -->
 <define name="assigned-address" class="dict">
   <local type="network-address-prefix"/>
   <peer type="network-address"/>

   <!-- This is the addrconf method that owns this address -->
   <owner type="builtin-addrconf" />
 </define>

 <define name="assigned-address-list" class="array" element-type="assigned-address" />

 <!-- A route assigned to a network interface -->
 <define name="assigned-route" class="dict">
   <destination type="network-address-prefix"/>
   <mtu type="uint32" />
   <tos type="uint32" />
   <priority type="uint32" />

   <nexthop class="dict">
     <gateway type="network-address"/>
     <device type="string" />
     <weight type="uint32" />
     <flags type="uint32" />
   </nexthop>

   <!-- This is the addrconf method that owns this address -->
   <owner type="builtin-addrconf" />
 </define>

 <define name="assigned-route-list" class="array" element-type="assigned-route" />

 <!-- Generic per-address family settings -->
 <define name="af-info" class="dict">
    <enabled type="boolean" />
    <forwarding type="boolean" />
 </define>

 <!-- Properties of an interface start here -->
 <name type="string"/>

 <!-- These bits must match the definitions in netinfo.h -->
 <status type="state-bits" />

 <link-type type="builtin-iftype"/>

 <index type="uint32"/>
 <metric type="uint32"/>
 <txqlen type="uint32"/>
 <mtu type="uint32"/>
 <alias type="string"/>

 <!-- General ipv4 and ipv6 specific settings -->
 <ipv4 type="af-info"/>
 <ipv6 type="af-info"/>

 <addresses type="assigned-address-list" />
 <routes type="assigned-route-list" />
</define>

<service name="interface-list" interface="com.suse.Wicked.InterfaceList">
 <!-- We may add higher-level methods here that kind of throw a full configuration
   -- at the server and expect it to bring up the whole interface -->
</service>

<service name="interface" interface="com.suse.Wicked.Interface" object-class="netif">
  <define name="properties" type="network-interface"/>

  <define name="callback-info" class="dict">
   <!-- We can return one or more these callback elements in a single dict -->
   <callback class="dict">
     <uuid type="uuid-type"/>
     <event type="string"/>
   </callback>
  </define>

  <define name="link-request" class="dict">
   <status type="network-interface:state-bits"/>

   <metric type="uint32"/>
   <mtu type="uint32"/>
   <txqlen type="uint32"/>
   <alias type="string"/>

   <ipv4 type="network-interface:af-info"/>
   <ipv6 type="network-interface:af-info"/>
  </define>

  <define name="addrconf-lease" class="dict">
    <lease class="dict">
      <state type="builtin-addrconf-state"/>
    </lease>
  </define>

  <method name="firewallUp">
    <arguments>
      <!-- to be defined -->
    </arguments>
  </method>

  <method name="linkUp">
    <arguments>
      <request type="link-request" />
    </arguments>
    <return>
      <callback-info/>
    </return>
  </method>

  <method name="linkDown">
    <arguments>
      <request type="link-request" />
    </arguments>
    <return>
      <callback-info/>
    </return>
  </method>

  <method name="linkAuth">
    <arguments>
      <!-- to be defined -->
    </arguments>
  </method>

  <method name="networkChange">
    <arguments>
      <!-- to be defined -->
    </arguments>
    <return>
      <network-interface:state-bits/>
    </return>
  </method>


  <!-- Signals emitted by this interface -->
  <signal name="linkUp" />
  <signal name="linkDown" />
  <signal name="networkUp" />
  <signal name="networkDown" />
  <signal name="addressLost" />

</service>

<service name="ipv4:static" interface="com.suse.Wicked.Addrconf.ipv4.static" object-class="netif">
  <define name="request" class="dict">
    <address type="network-interface:assigned-address" />
    <route type="network-interface:assigned-route" />
  </define>
  <define name="properties" type="interface:addrconf-lease"/>

  <method name="requestLease">
    <arguments>
      <!-- Note: all addresses are expected to be IPv4 -->
      <config type="request"/>
    </arguments>
    <return>
      <interface:callback-info/>
    </return>
  </method>

  <method name="dropLease">
    <return>
      <interface:callback-info/>
    </return>
  </method>
</service>

<service name="ipv6:static" interface="com.suse.Wicked.Addrconf.ipv6.static" object-class="netif">
  <define name="request" class="dict">
    <address type="network-interface:assigned-address" />
    <route type="network-interface:assigned-route" />
  </define>
  <define name="properties" type="interface:addrconf-lease"/>

  <method name="requestLease">
    <arguments>
      <!-- Note: all addresses are expected to be IPv6 -->
      <config type="request"/>
    </arguments>
    <return>
      <interface:callback-info/>
    </return>
  </method>

  <method name="dropLease">
    <return>
      <interface:callback-info/>
    </return>
  </method>
</service>

<service name="ipv4:dhcp" interface="com.suse.Wicked.Addrconf.ipv4.dhcp" object-class="netif">
  <define name="request" class="dict">
    <uuid type="uuid-type"/>

    <acquire-timeout type="uint32" />
    <hostname type="string" />
    <client-id type="string" />
    <vendor-class type="string" />
    <lease-time type="uint32" />
  </define>
  <define name="properties" type="interface:addrconf-lease"/>

  <method name="requestLease">
    <arguments>
      <config type="request"/>
    </arguments>
    <return>
      <interface:callback-info/>
    </return>
  </method>

  <method name="dropLease">
    <return>
      <interface:callback-info/>
    </return>
  </method>
</service>

