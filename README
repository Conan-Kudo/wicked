
===========================================================
NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! 

This code is currently undergoing a massive rewrite. Use at your
own risk. Do not expect things to make a lot of sense. Do not
expect documentation to relate to program behavior in any way.

You have been warned :)

NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! NOTE! 
===========================================================


Presenting wicked network configuration
=======================================

This tool and library provides a new, experimental framework
for network configuration.

One of the bigger problems with network interface management today,
and with the ifup scripts in general, is that different layers of
network management get jumbled together into one single script,
or at most two different scripts, that interact with each other in a
not-really-well-defined way, with side effects that are difficult to be
aware of, obscure constraints and conventions, etc. Address configuration
protocols are being used that are implemented via daemons like dhcpcd,
which interact rather poorly with the rest of the infrastructure.

The idea of wicked is to decompose the problem in several ways.

One is to use a client/server model. This allows wicked to define
standardized facilities for things like address configuration that
are well integrated with the overall framework. For instance, with
address configuration, the admin may request that an interface should be
configured via dhcp, ipv4 zeroconf or ibft, and all the respective
addrconf service does is obtain the lease from its server, and pass it
on to the wicked server process, which installs the requested addresses
and routes.

The other approach to decomposing the problem is to enforce the layering
aspect. For any type of network interface, it is possible to define
a dbus service that configures the network interface's device layer -
be it a vlan, a bridge, a bond, or an SRIOV virtual function. Common
functionality, such as address configuration, is implemented by joint
services that are layered on top of these device specific services,
without having to implement them specifically.

The wicked framework implements these two aspects by using a variety
of dbus services, which get attached to a network interface depending
on its type.

To illustrate this point, here's a rough overview of the current
object hierarchy in wicked.

Each network interface is represented via a child object of
/com/suse/Wicked/Interfaces. The name of the child object is given by
its ifindex, so e.g. the loopback interface, which usually gets
ifindex 1, is /com/suse/Wicked/Interfaces/1, the first ethernet interface
registered is /com.suse/Wicked/Interfaces/2, etc.

Each network interface has a "class" associated with it, which is
used to select the dbus interfaces it supports. By default, each
network interface is of class "netif", and wickedd will automatically
attach all interfaces compatible with this class. In the current
implementation, this includes the following interfaces

com.suse.Wicked.Interface
	Generic network interface functions, such as taking the link
	up or down, assigning an MTU, etc.

com.suse.Wicked.Addrconf.ipv4.dhcp
com.suse.Wicked.Addrconf.ipv6.dhcp
com.suse.Wicked.Addrconf.ipv4.auto
com.suse.Wicked.Addrconf.ipv6.auto
	Address configuration services for DHCP, ipv6 autoconf, ipv4
	zeroconf, etc.

Beyond this, network interfaces may require/offer special configuration
mechanisms. For instance, for an Ethernet device, you may want to be
able to control the link speed, offloading of checksumming, etc. To
achieve this, ethernet devices have a class of their own, called
netif-ethernet, which is a subclass of netif. As a consequence, the
dbus interfaces assigned to an ethernet interface include all the
services listed above, plus com.suse.Wicked.Ethernet, whichis a service
which is available only to object belonging to the netif-ethernet
class.

Similarly, there exist classes for interface types like bridges, vlans,
bonds, or infiniband.

Obviously, this begs the question, how do you interact with an interface
that needs to be created first - such as a VLAN, which is really a
virtual network interface that sits on top of an ethernet device.

For these, wicked defines factory interfaces, such as
com.suse.Wicked.VLAN.Factory. Such a factory interface offers a single
function that lets you create an interface of the requested type. These
factory interfaces are attched to the /com/suse/Wicked/Interfaces list
node.


, with standardized facilities for
configure addresses, routes, name resolution etc.

The idea is to decompose the different aspects of network configuration
management

The idea is to replace much of the shell scripting that happens in
/sbin/ifup and friends with a combination of C code that handles most
of the basic interface configuration tasks, with a powerful,
extensible XML representation of the network configuration.

Right now, this implementation uses a daemon service and a command
line utility. These two communicate securely via dbus.

The server offers a REST interface to various aspects of network
configuration. The client application uses REST calls to retrieve
interface configuration and status, or to reconfigure interfaces.
The path space used by the API can be extended to cover other
aspects of network configuration as well, such as reading, writing
and restoring the resolv.conf file.


What's currently supported
==========================

wicked currently supports

 -	configuration file backends to parse SUSE and RedHat style
 	/etc/sysconfig/network files. Since I'm doing my development
	on a SUSE installation, the former are probably significantly
	more stable than the RedHat ones.

 -	a configuration file backend to represent network interface
 	configuration in XML. The syntax evolved out of what netcf
	uses.

 -	bring-up and shutdown of "normal" network interfaces
 	such as Ethernet, loopback, Token Ring etc, as well
	as VLAN interfaces, bridges and bonding devices.

	Bridging and bonding is not really tested yet, so
	quite possibly still buggy.

	Wireless is not supported yet.

 -	A built-in DHCPv4 client

 -	no DHCPv6 yet

 -	There is some experimental code that should help to
 	automatically bring up interfaces as soon as a link
	is detected.

 -	A homegrown XML reader/writer implementation, which is far
 	from being fully standards conforming, but which has a
	small footprint and seems reasonably fast.
	This comes along with a (likewise, smallish) partial
	implementation of XPATH 1.0, which lets you extract
	information from an XML interface description without
	having to do any XML parsing yourself.



What you can do
===============

To play around with wicked, first install sample configuration
files by typing

	make install-files

Next, start the server process (again, as root):

	./wickedd --debug most --foreground

This causes the server to run in debugging mode, printing trace
information to stderr.

You can then use the client utility to explore the REST interface:

	./wicked get /config/interface
	./wicked get /system/interface

These two commands should display the configuration of all network
interfaces (as described in /etc/sysconfig/network), and their
current system state, respectively. You can display individual
interfaces by retrieving e.g. /system/interface/lo

You can configure interfaces, too. Let's bring up a sample VLAN
interface:

	./wicked ifup --file ./samples/netcf/vlan-static.xml eth0.42

This should bring up a VLAN interface named "eth0.42", with a
VLAN tag of 42, and a few statically assigned IP addresses. Try
"ifconfig" to see whether it worked.

What the above command does, is essentially retrieving the
description of all interfaces from the specified file, and bringing
up the one named "eth0.42".

Since the file contains only one interface, you could also have used
"all" instead of the interface name. As the name implies, this brings
up all interfaces listed in the file.

Bringing up a single interface is easy - what really happens here is
the client adds an XML element to the interface description
tell the server that the desired interface state is "up", and
sending the entire description to the server using a PUT call.
Note that this operation will create the VLAN interface on
the fly if it's not yet there.

You can also shut down and bring all interfaces configured on your
system using things like

	./wicked ifdown all
	./wicked ifup boot

Please refer to the wicked(8) manpage for details.

The analogous approach can be used to bring down the interface
again. For your convenience, you could use use

	./wicked ifdown eth0.42

but for the sake of the example, let's do it manually instead:

	./wicked get /system/interface/eth0.42 |
		sed 's:<status.*/>:<status network="down"/>:' > xxx
	./wicked put /system/interface/eth0.42 < xxx

This should shut down the VLAN device. In order to delete the
VLAN interface again, use

	./wicked delete /system/interface/eth0.42

Bringing up multiple interfaces
===============================

For bonds and bridges, it may make sense to define the entire
device topology in one file, and bring it up in one go. This
particularly makes sense for bonding, where you may need to
create the slave devices (if they're virtual devices, such as
VLANs).

For these, you simply define the device topology in one file,
and tell wicked to bring up the whole configuration.

As an example, take a look at samples/netcf/bond-vlan-static.xml
This configuration defines an Ethernet bond built from two
VLAN interfaces. To bring it up, simple call

	./wicked ifup --file samples/netcf/bond-vlan-static.xml all

The client will bring up devices in the appropriate order (ie
first create the two VLAN interfaces, then create the bond and
enslave the two VLANs).

Note, the ifdown command does not yet recognize the --file switch,
so bringing down the bond and all its constituents still needs to
be done manually. This will be fixed in a future version.

Handling incremental changes
============================

With wicked, there is no need to actually take down an interface
to reconfigure it (unless it's required by the kernel). For instance,
in order to add another IP address or route to a statically configured
network interface, simply add it to the interface definition, and do
another "put" operation. The server will try hard to update only
those settings that changed. This applies to link-level options such as
the device mtu or the MAC address, as well as network level settings,
such as addresses, routes, or even address configuration mode (when
moving from a static configuration to, say, DHCP).

Things get tricky of course with virtual interfaces combining several
real devices, like bridges or bonds. For bonded devices, it's not
possible to change certain parameters while the device is up. Doing
that will result in an error.

However, things that should still work, is adding or removing child
devices of a bond or bridge, or chooseing a bond's primary interface.


Wicked extensions - address configuration
=========================================

It's not useful to require support for all interface types to be coded in
C. Languages like C are useful when you want to do slightly complex things,
but for many mundane tasks of system configuration, using shell scripts
is still the most natural thing to do.

For that reason, wicked is designed to be extensible via shell scripts.
These extensions can be defined in the config.xml file.

Currently, two classes of extensions are supported:

 *	link configuration: these are scripts responsible for setting
 	up a device's link layer according to the configuration
	provided by the client, and for tearing it down again.

 *	address configruation: these are scripts responsible for
 	managing a device's address configuration.
	Static address configuration and DHCPv4 are managed by wicked
	itself, but dynamic address configuration schemes such as DHCPv6
	or IBFT need to be implemented via extensions.

Typically, extensions have a start and a stop command, an optional
"pid file", and a set of environment variables that get passed to
the script.

To illustrate how this is supposed to work, let's look at how a
DHCPv6 extension is defined:

  <addrconf>
    <extension name="dhcp6" type="dhcp" family="ipv6">
      <action name="start" command="/etc/wicked/wicked-dhcp6 start %{@name}"/>
      <action name="stop" command="/etc/wicked/wicked-dhcp6 stop %{@name}"/>
      <pidfile path="/var/run/dhcpcd-%{@name}.pid"/>
      <environment putenv="DHCP_TIMEOUT=%{/protocol[@family = 'ipv6']/dhcp/lease/@timeout}"/>
      <environment putenv="DHCP_REQ_HOSTNAME=%{/protocol[@family = 'ipv6']/dhcp/request/@hostname}"/>
    </extension>
  </addrconf>

First off, it's in the <addrconf> section, marking it as an address
configuration extension.

The extension is of type "dhcp", ie it supports the DHCP address
configuration mode (these names are reserved; if nothing else, wicked
at least needs to know this configuration mode exists, and assign
it a reserved name).

The family attribute says this DHCP extension supports IPv6 only; if
you create an extension supporting both IPv4 and IPv6, you would use
"ipv4,ipv6".

This extension shows how the start and stop scripts are defined, and the
pid file. The latter is used to check whether the address configuration
service is currently active for the given interface.  This allows "GET"
requests to report what type of address configuration is currently in
use for a system interface.

Finally, there are several <environment> elements; these declare variables
to be passed to the commands. This is currently the recommended way to
pass configuration information to the extension.

The strings used throughout the extension definition contain XPATH
expressions enclosed in %{...}. These expressions get evaluated
relative to the interface that needs to be managed. For instance,
"%{@name}" will extract the <interface name="..."> attribute.

A somewhat more complicated expression is shown in the environment
definitions. "/protocol[@family = 'ipv6']" will search the
<interface> element for a child named "protocol" with a "family"
attribute of "ipv6". Relative to this element, it will then retrieve
the "timeout" attribute from the <lease> element nested within <dhcp>.

The XPATH syntax is admittedly a little awkward, but this approach
allows you a high degree of flexibility. Since the XML interface
definition from the "PUT" command is passed directly to the extension,
you can add new elements or attributes to the schema without actually
having to implement anything within wicked (apart from teaching it
about the addrconf type).


Wicked extensions - link layer configuration
============================================

Extensions for link layer configuration work pretty much the same as
those for address configuration. As an example, check the extension
for infiniband devices found in the sample config.xml file in the
source distribution.

For link configuration, any request to bring up an interface's
link layer will invoke the "start" script. The "stop" script is
used when the client asks for an interface to be deleted.

Wicked extensions - configuration files
=======================================

You can extend the handling of configuration with scripts, as well.
For instance, when you configure the system's hostname by doing a
PUT request on /config/hostname, by default it will write the provided
name to /etc/HOSTNAME. You may want to trigger additional actions
when this happens, for instance you may want to update the hosts file
as well.

This can be done by defining an extension in the <files> section:

  <files>
   <extension name="config.hostname">
    <action name="update" command="/sbin/netconfig hostname-updated" />
   </extension>
  </files>

Future wickedness
=================

In the future, it may be useful to extend what wicked supports beyond
the configuration of network interfaces itself.

Some of that can probably be accomodated by supporting more path names
in the REST API, for instance /system/resolver as an interface to modify
the resolver file in a coherent fashion.


A Note on the name
==================

Only after I started to show my code to a bunch of people, I found out that
there's a project called WICD, which aims to provide... a network connection
manager :-)

To make this absolutely plain, wicked is in no way related to WICD, for good
or bad. It's just coincidence.
